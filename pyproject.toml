[project]
authors = [{ name = "Cody Fincher", email = "cody@litestar.dev" }]
name = "litestar-pingcrm"
version = "0.1.0"
description = "A demo application to illustrate how Inertia.js works with Litestar"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "litestar[jinja]",
    "litestar-granian",
    "litestar-vite",
    "pwdlib[argon2]",
    "httptools",
    "pydantic",
    "advanced-alchemy",
    "aiosqlite",
    "python-dotenv",
]

[project.scripts]
pingcrm = "manage:run_cli"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.sdist]
packages = ["app", "database", "config", "manage"]

[tool.hatch.build.targets.wheel]
packages = ["app", "database", "config", "manage"]



[dependency-groups]
dev = [
    "mypy",
    "pre-commit",
    "pyright",
    "pytest",
    "ruff",
]

# LINTING

[tool.ruff]
exclude = [
  ".direnv",
  ".git",
  ".mypy_cache",
  ".ruff_cache",
  ".venv",
  "venv",
  "__pypackages__",
  "build",
  "dist",
  "node_modules",
  "__pycache__",
]
fix = true
line-length = 180
lint.fixable = ["ALL"]
lint.ignore = [
  "E501",    # pycodestyle line too long, handled by black
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037",   # pyupgrade - removes quotes from type annotation
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "B008",    # flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001",  # Boolean typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "FBT003",  # Boolean Boolean default positional argument in function definition
  "ARG002",  # Unused method argument
  "ARG001",  #  Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "SLF001",
  "PT007",
  'S603',
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "PERF203", # ignore for now; investigate
]
lint.select = ["ALL"]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["."]
target-version = "py312"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.isort]
known-first-party = ['tests', 'app', 'config', 'database', "db", "resources"]

[tool.ruff.lint.per-file-ignores]
"**/*/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"__init__.py" = ['F401', 'D104']

[tool.slotscheck]
strict-imports = false

[tool.codespell]
skip = 'uv.lock, package-lock.json'

[tool.mypy]
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
|^node_modules/
)
'''
implicit_reexport = false
plugins = []
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
